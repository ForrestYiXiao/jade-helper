##引入mybatis支持
$!{jadeSupport.vm}

##定义初始变量
#set($tableName = $tool.append($tableInfo.name, "DAO"))
##设置回调
$!callback.setFileName($tool.append($tableName, ".java"))
$!callback.setSavePath($tool.append($tableInfo.savePath, "/dao"))

##拿到主键
#if(!$tableInfo.pkColumn.isEmpty())
    #set($pk = $tableInfo.pkColumn.get(0))
#end

#if($tableInfo.savePackageName)package $!{tableInfo.savePackageName}.#{end}dao;

import cn.techwolf.jade.annotation.DAO;
import cn.techwolf.jade.annotation.ReturnGeneratedKeys;
import cn.techwolf.jade.annotation.SQL;
import com.zhipin.wisdomstone.constant.DataSourceDef;
import $!{tableInfo.savePackageName}.model.$!{tableInfo.name}DO;

import java.util.List;

/**
 * $!{tableInfo.comment}($!{tableInfo.name})表数据库访问层
 *
 * @author $!author
 * @since $!time.currTime()
 */
@DAO(catalog = DataSourceDef.ZP_WISDOMSTONE)
public interface $!{tableName} {

    String TABLE_NAME = " $!tableInfo.name ";

    String INSERT_COLUMNS = " #foreach($column in $tableInfo.fullColumn)#if($column.name != 'add_user_id' && $column.name != 'update_user_id' && $column.name != 'add_time' && $column.name != 'update_time' && $column.name != 'deleted' && $column.name != 'id'):1.$column.name#if($velocityHasNext),#end#end#end ";

    String ALL_COLUMNS = " id, " + INSERT_COLUMNS + ", deleted, add_time ,update_time ";

    @ReturnGeneratedKeys
    @SQL("insert into " + TABLE_NAME + " ( " + INSERT_COLUMNS + " ) values ( #foreach($column in $tableInfo.fullColumn)#if($column.columnName != 'addUserId' && $column.columnName != 'updateUserId' && $column.columnName != 'addTime' && $column.columnName != 'updateTime' && $column.columnName != 'deleted' && $column.columnName != 'id') :1.$column.columnName#if($velocityHasNext),#end#end#end )")
    Long save($!{tableInfo.name}DO $!tool.firstLowerCase($tableInfo.name)DO);

    @ReturnGeneratedKeys
    @SQL("insert into " + TABLE_NAME + " ( " + INSERT_COLUMNS + " ) values ( #foreach($column in $tableInfo.fullColumn)#if($column.columnName != 'addUserId' && $column.columnName != 'updateUserId' && $column.columnName != 'addTime' && $column.columnName != 'updateTime' && $column.columnName != 'deleted' && $column.columnName != 'id'):1.$column.columnName#if($velocityHasNext),#end#end#end )")
    Long[] batchSave(List<$!{tableInfo.name}DO> $!tool.firstLowerCase($tableInfo.name)DOList);

    /**
     * 修改记录
     */
    @SQL("update " + TABLE_NAME + " set #foreach($column in $tableInfo.fullColumn)#if($column.columnName != 'addUserId' && $column.columnName != 'addTime' && $column.columnName != 'updateTime' && $column.columnName != 'deleted' && $column.columnName != 'id')$!column.obj.name = :1.$!column.columnName#if($velocityHasNext), #end#end#end where id = :1.id")
    int updateRecord($!{tableInfo.name}DO $!tool.firstLowerCase($tableInfo.name)DO);

    @SQL("update " + TABLE_NAME + " set deleted = 1, update_user_id = :2 where id = :1")
    int deleteById(long id, long daleteUserId);

    /**
     * 查询指定行数据
     */
    List<$!{tableInfo.name}DO> queryAllByLimit($!{tableInfo.name} $!tool.firstLowerCase($!{tableInfo.name}), int offset, int pageSize);

    /**
     * 统计总行数
     *
     * @param $!tool.firstLowerCase($!{tableInfo.name}) 查询条件
     * @return 总行数
     */
    long count($!{tableInfo.name}DO $!tool.firstLowerCase($!{tableInfo.name}));

}
